Andres Fuentes and Caelyn Dovey
COMP40: Homework #6: um
4/12/2018
README

A. ACKNOWLEDGEMENTS: 
   We would like to thank the course staff for their continued support in our 
   COMP40 endeavours, specifically (but not limited to):
   Isaac, Ashton, Daniel, Tom, Sebastian and many more!

B. IMPLEMENTED: 
   We have correctly implemented a software implementation of a simple virtual 
   machine.

C. DEPARTURES FROM OUR ORIGINAL DESIGN:
   In our design we chose to use a Hanson Table for storing memory segments. 
   Upon further consideration, we decided to use a Hanson sequence to hold all 
   of our memory segments. This was due to the overhead associated with the 
   constant time access of elements in the Hanson table. 

   Another departure from our design was the decision to store the program 
   counter in the CPU module rather than in the memory module. We did this to 
   keep the fetch/decode/execute loop in the CPU. 

D. ARCHITECTURE: 
   Our um program can be broken up into 4 different modules, with one main 
   executable. The four different modules are the cpu, math instructions, i/o 
   instructions, and memory module. Once initialized by main, the cpu module 
   fetches segments from the program stored in the memory module and then 
   decodes/executes them appropriately. Decoding consists of calling functions 
   in the appropriate modules, either math, i/o or memory. 

      - CPU Module: The CPU module is abstracted from the main executable 
      in such a way that the main only passes it the name of a file. The CPU 
      module is primarily a fetch/decode/execute machine abstraction. The CPU 
      knows the following secrets:
		The contents of the registers
		What the program counter points to (the current instruction).

      - Math Instructions: The math module is abstracted in such a way that it 
      takes in unsigned 32 bit integers, and returns the result of simple 
      arithmetic operations. It does not know the contents of the registers, 
      the status of the program, the name of the program, etc.

      - I/O Instructions: The i/o module is abstracted in such a way that it 
      either takes in or returns output in the form in characters. It does not 
      know the contents of the registers, the status of the program, the name of
      the program, etc 

      - Memory Instructions: The memory module is abstracted in such a way that
       it takes in segment IDs, offsets, or desired segment lengths and creates,
       accesses, alters, or deletes memory. It does not know the current 
       instruction being executed, the register contents, or how to decode the 
       32bit instructions it holds. The memory module knows the following 
       secrets:
                Which segments are currently mapped.
	        The 32bit words stored in each segment. 
	        Which IDs have been unmapped.
	
E. TIMING ESTIMATE: 
   Our um machine takes an estimated 2.44 cpu seconds to execute 50 million 
   instructions. We know this because based on 7 trial runs, we found that 
   using the built in time command our um took an average of 3.91 cpu seconds 
   (user time) to complete 80 million instructions. Using this rate, we can 
   expect our um machine to execute 50 million instructions in 2.44 cpu seconds.
   (3.91 / 8) * 5.

F. UM UNIT TESTS:

   halt.um - a simple halt test, just tests the halt instruction on its own by 
   calling halt.

   halt-verbose.um - a more complex halt test, calls output after calling halt.
   Should have no output because halt should end the program.

   add.um - simple add test, just adds 50 & 55 (first placed in two different 
   registers) and outputs their sum (105 or i)

   io.um - tests functionality of input and output instructions by calling input
   (which reads from io.0) and then output (which should match the contents of 
   io.1). Io.0 contains 4 characters ending with two newline characters, so the
    output must also end in two newline characters. 

   cmov1.um - tests conditional move when r[c] is 0. Loads values 97 & 98 into 
   registers r3 & r4, then calls conditional move (r3, r4, r5). Output is called
   on r3 and r4. Output must match cmov1.1, which contains the original values
   loaded (“ab”) because r5 is 0 during the function call. 

   cmov2.um - tests conditional move when r[c] is not 0. Loads values 101, 97 &
   98 into registers r3, r4 & r5, then calls conditional move (r3, r4, r5). 
   Output is called on r3 and r4. Output must match cmov2.1, which contains 
   “aa". 

   MS.um - tests map segment by creating ten segments of varying length then 
   outputting their segID’s + 100 (for readability - maps to printable ascii 
   letters). For our um implementation, these letters will be “efghijklm” as in
    MS.1.

   memory-verbose.um - tests a series of memory instructions (load value, map 
   segment, unmap segment, segmented store, segmented load, and halt) by 
   creating a segment which stores the IDs of 10 segments that are mapped 
   using map segment. Finally, unmap segment is called on each ID, which are 
   retrieved via segmented load. 

   nand.um - tests the NAND instruction, as well as loadval divide and output 
   (indirectly). NANDs 382 & 422, then divides the result by 2 (to get answer 
   in printable ascii char range), and outputs the result, as seen in nand.1 
   (‘l’, or 108)

   mult-and-div.um - tests multiply and divide by multiplying two values then 
   dividing the result by each of these two values. The results are printed via
    output, and should match mult-and-div.1

   load-program - tests the load program instruction by loading 6 into r1 along
   with some other dummy commands, then called load program(r1) on segment 0.
   Because r1 had 6, the file pointer is set to instruction 6, which skips some
   instructions and pushes the program forward. If the jump is correctly 
   implemented, it should output ‘g’ (102). Otherwise, the output may differ. 

G. TIME BREAKDOWN
 
   Hours spent analyzing the assignment: 4
   Hours spent preparing your design: 8
   Hours spent solving problems after analysis: 20
